{
  "id": "proj_gdrive_upload",
  "name": "GDrive_upload",
  "createdAt": "2025-09-27T20:03:21.547Z",
  "updatedAt": "2025-10-13T20:32:29.059Z",
  "status": "synced",
  "workflow": {
    "createdAt": "2025-09-27T20:03:21.547Z",
    "updatedAt": "2025-09-29T06:24:32.198Z",
    "id": "Yxs70uuQ2IMHaXP9",
    "name": "GDrive_upload",
    "active": false,
    "isArchived": false,
    "nodes": [
      {
        "parameters": {
          "jsCode": "const { parentId, folderName, fileUrl, fileName } = $json;\nif (!parentId) throw new Error('parentId is required');\nif (!folderName) throw new Error('folderName is required');\nif (!fileUrl) throw new Error('fileUrl is required');\nfunction nameFromUrl(u){ try { const p = new URL(u).pathname; const last = p.split('/').filter(Boolean).pop() || ''; return decodeURIComponent(last) || undefined; } catch(e){ return undefined; } }\nconst inferred = fileName || nameFromUrl(fileUrl) || 'file';\nreturn [{ json: { parentId, folderName, fileUrl, fileName: inferred } }];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -304,
          -16
        ],
        "name": "gd_input",
        "id": "27810cdb-bfd0-4908-ad78-07e0ef698cd3"
      },
      {
        "parameters": {
          "resource": "fileFolder",
          "searchMethod": "query",
          "queryString": "={{ `name='${$json.folderName.replace(/'/g, \"\\\\'\")}' and mimeType='application/vnd.google-apps.folder' and trashed=false and '${$json.parentId}' in parents` }}",
          "limit": 1,
          "filter": {},
          "options": {}
        },
        "type": "n8n-nodes-base.googleDrive",
        "typeVersion": 3,
        "position": [
          -96,
          -16
        ],
        "name": "find_folder",
        "id": "8a48268a-f998-46d3-9458-8f7fd9dd840c",
        "alwaysOutputData": true,
        "credentials": {
          "googleDriveOAuth2Api": {
            "id": "8rSm3dJNel8Qc1SP",
            "name": "Google Drive"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict",
              "version": 2
            },
            "conditions": [
              {
                "leftValue": "={{ $items(\"find_folder\").some(i => i.json?.id) }}",
                "rightValue": 0,
                "operator": {
                  "type": "boolean",
                  "operation": "true",
                  "singleValue": true
                },
                "id": "d0a85441-655f-4bce-8ac3-8fdfffe4950e"
              }
            ],
            "combinator": "and"
          },
          "options": {}
        },
        "type": "n8n-nodes-base.if",
        "typeVersion": 2.2,
        "position": [
          96,
          -16
        ],
        "name": "folder_exists",
        "id": "51cfd9f7-7857-4603-925e-5a8a292d26a3"
      },
      {
        "parameters": {
          "jsCode": "const id = $input.first().json.id; if (!id) throw new Error('Folder not found in search'); \nreturn [{ json: { folderId: id } }];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          320,
          -176
        ],
        "name": "use_folder",
        "id": "f5e68c88-5d1f-421a-a12d-f0148f469b8f"
      },
      {
        "parameters": {
          "resource": "folder",
          "name": "={{ $items(\"gd_input\")[0].json.folderName }}",
          "driveId": {
            "__rl": true,
            "mode": "list",
            "value": "My Drive"
          },
          "folderId": {
            "__rl": true,
            "value": "={{ $items(\"gd_input\")[0].json.parentId }}",
            "mode": "id"
          },
          "options": {}
        },
        "type": "n8n-nodes-base.googleDrive",
        "typeVersion": 3,
        "position": [
          320,
          0
        ],
        "name": "create_folder",
        "id": "432a8a39-2da3-41c8-ae60-f878dbb29d0d",
        "credentials": {
          "googleDriveOAuth2Api": {
            "id": "8rSm3dJNel8Qc1SP",
            "name": "Google Drive"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "if ($json.folderId) return [{ json: { folderId: $json.folderId } }]; if ($json.id) return [{ json: { folderId: $json.id } }]; throw new Error('No folderId');"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          512,
          0
        ],
        "name": "folder_id",
        "id": "156889f9-f5e9-4d49-a851-59838c3d4d00"
      },
      {
        "parameters": {
          "url": "={{ $('gd_input').item.json.fileUrl }}",
          "options": {
            "response": {
              "response": {
                "responseFormat": "file",
                "outputPropertyName": "screenshot"
              }
            }
          }
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          720,
          0
        ],
        "name": "download_by_url",
        "id": "53edb96b-c1ff-49d0-aea5-1fc516204b43"
      },
      {
        "parameters": {
          "resource": "fileFolder",
          "searchMethod": "query",
          "queryString": "={{ \"name='\" + String($json.fileName||'').trim().replace(/'/g,\"\\\\'\") + \"' and trashed=false and '\" + $json.folderId + \"' in parents\" }}\n\n",
          "limit": 2,
          "filter": {
            "driveId": {
              "mode": "list",
              "value": "My Drive"
            },
            "whatToSearch": "files"
          },
          "options": {}
        },
        "type": "n8n-nodes-base.googleDrive",
        "typeVersion": 3,
        "position": [
          -112,
          240
        ],
        "name": "find_duplicate",
        "id": "6c443f0f-5ee5-4516-a09e-d862e7c1d18b",
        "alwaysOutputData": true,
        "credentials": {
          "googleDriveOAuth2Api": {
            "id": "8rSm3dJNel8Qc1SP",
            "name": "Google Drive"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict",
              "version": 2
            },
            "conditions": [
              {
                "leftValue": "={{ $items(\"find_duplicate\").some(i => i.json?.id) }}",
                "rightValue": "",
                "operator": {
                  "type": "boolean",
                  "operation": "true",
                  "singleValue": true
                },
                "id": "2bab1fed-b61a-46b6-a270-a6eedd644f24"
              }
            ],
            "combinator": "and"
          },
          "options": {}
        },
        "type": "n8n-nodes-base.if",
        "typeVersion": 2.2,
        "position": [
          80,
          240
        ],
        "name": "file_exists",
        "id": "0530d150-4f79-4edf-aeaf-c1a489fbf48e"
      },
      {
        "parameters": {
          "jsCode": "const id = $input.first().json.id; if (!id) throw new Error('No existing file id'); return [{ json: { id } }];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          288,
          224
        ],
        "name": "use_existing_file",
        "id": "d3a70fdb-8f32-4047-8a45-79dfae42f7c6"
      },
      {
        "parameters": {
          "inputDataFieldName": "screenshot",
          "name": "={{ $json.fileName }}",
          "driveId": {
            "__rl": true,
            "mode": "list",
            "value": "My Drive"
          },
          "folderId": {
            "__rl": true,
            "value": "={{ $json.folderId }}",
            "mode": "id"
          },
          "options": {}
        },
        "type": "n8n-nodes-base.googleDrive",
        "typeVersion": 3,
        "position": [
          480,
          432
        ],
        "name": "upload_file",
        "id": "b912b153-dfe7-4f0e-accd-1626e3798791",
        "credentials": {
          "googleDriveOAuth2Api": {
            "id": "8rSm3dJNel8Qc1SP",
            "name": "Google Drive"
          }
        }
      },
      {
        "parameters": {
          "operation": "share",
          "fileId": {
            "__rl": true,
            "value": "={{ $json.fileId }}",
            "mode": "id"
          },
          "permissionsUi": {
            "permissionsValues": {
              "role": "reader",
              "type": "anyone"
            }
          },
          "options": {}
        },
        "type": "n8n-nodes-base.googleDrive",
        "typeVersion": 3,
        "position": [
          896,
          432
        ],
        "name": "gdrive_permission",
        "id": "f838c553-35b9-4984-8412-3b0be3d8c121",
        "credentials": {
          "googleDriveOAuth2Api": {
            "id": "8rSm3dJNel8Qc1SP",
            "name": "Google Drive"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "//const id = $json.id || $items('upload_file')[0]?.json?.id; if (!id) return [{ json: { _error: 'No file id' } }]; const driveViewUrl = `https://drive.google.com/file/d/${id}/view?usp=share_link`; const driveDirectUrl = `https://drive.google.com/uc?export=download&id=${id}`; return [{ json: { id, driveViewUrl, driveDirectUrl } }];\n// build_drive_url в саб-флоу\n//const fileId = $json.fileId;\nconst fileId = $node[\"file_id_passthrough\"].json.fileId;\n\nif (!fileId) return [{ json: { _error: 'No file id from upload_file' } }];\n\nconst driveViewUrl   = `https://drive.google.com/uc?export=view&id=${fileId}`;\nconst driveDirectUrl = `https://drive.google.com/uc?export=download&id=${fileId}`;\n\nreturn [{ json: { fileId, driveViewUrl, driveDirectUrl } }];\n"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          1104,
          432
        ],
        "name": "build_drive_url",
        "id": "6a840a51-5946-403b-af8f-61d1b92ff1a8"
      },
      {
        "parameters": {
          "inputSource": "passthrough"
        },
        "type": "n8n-nodes-base.executeWorkflowTrigger",
        "typeVersion": 1.1,
        "position": [
          -496,
          -16
        ],
        "id": "e9572fa0-b179-4794-9b53-f354af8af4a8",
        "name": "start"
      },
      {
        "parameters": {
          "jsCode": "// prepare_for_upload — берет folderId из folder_id, а бинарь из download_by_url\nconst folderId = $items('folder_id')[0]?.json?.folderId;\nif (!folderId) throw new Error('No folderId (check node \"folder_id\").');\n\n// бинарь от HTTP Request (download_by_url)\nconst dl = $items('download_by_url')[0] || {};\nconst ss = dl.binary?.screenshot;\nif (!ss || (!ss.data && !ss.filePath)) {\n  throw new Error(\"No binary from 'download_by_url'\");\n}\n\n// имя файла: из входа gd_input/normalize, иначе из бинаря\nconst inp = $items('gd_input')?.[0]?.json || $items('normalize_for_notion')?.[0]?.json || {};\nlet fileName = inp.fileName || ss.fileName || 'file';\nif (!/\\.[a-z0-9]+$/i.test(fileName)) {\n  const ext = ss.fileExtension || (ss.mimeType?.split('/')[1]) || 'bin';\n  fileName = `${fileName}.${ext}`;\n}\n\n// важное: отдаем копию бинаря (иначе иногда «пустеет»)\nconst copy = JSON.parse(JSON.stringify(ss));\n\nreturn [{\n  json: { folderId, fileName },\n  binary: { screenshot: copy },\n}];\n"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          288,
          432
        ],
        "name": "prepare_for_upload1",
        "id": "2ee79d68-7759-45cd-8a8c-f3c6b9b00ec1",
        "executeOnce": false
      },
      {
        "parameters": {
          "jsCode": "// prepare_for_upload — берет folderId из folder_id, а бинарь из download_by_url\nconst folderId = $items('folder_id')[0]?.json?.folderId;\nif (!folderId) throw new Error('No folderId (check node \"folder_id\").');\n\n// бинарь от HTTP Request (download_by_url)\nconst dl = $items('download_by_url')[0] || {};\nconst ss = dl.binary?.screenshot;\nif (!ss || (!ss.data && !ss.filePath)) {\n  throw new Error(\"No binary from 'download_by_url'\");\n}\n\n// имя файла: из входа gd_input/normalize, иначе из бинаря\nconst inp = $items('gd_input')?.[0]?.json || $items('normalize_for_notion')?.[0]?.json || {};\nlet fileName = inp.fileName || ss.fileName || 'file';\nif (!/\\.[a-z0-9]+$/i.test(fileName)) {\n  const ext = ss.fileExtension || (ss.mimeType?.split('/')[1]) || 'bin';\n  fileName = `${fileName}.${ext}`;\n}\n\n// важное: отдаем копию бинаря (иначе иногда «пустеет»)\nconst copy = JSON.parse(JSON.stringify(ss));\n\nreturn [{\n  json: { folderId, fileName },\n  binary: { screenshot: copy },\n}];\n"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -304,
          240
        ],
        "name": "prepare_for_check",
        "id": "46087933-5f4a-43f7-ad52-44875da3ed59",
        "executeOnce": false
      },
      {
        "parameters": {
          "jsCode": "// Берём id из текущего item-а и фиксируем как fileId\nconst id = $json.id;\nif (!id) throw new Error('No file id on input');\nreturn [{ json: { fileId: id } }];\n"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          688,
          432
        ],
        "id": "030da184-ca64-4b43-9a9a-17a7db6daf1a",
        "name": "file_id_passthrough"
      }
    ],
    "connections": {
      "gd_input": {
        "main": [
          [
            {
              "node": "find_folder",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "find_folder": {
        "main": [
          [
            {
              "node": "folder_exists",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "folder_exists": {
        "main": [
          [
            {
              "node": "use_folder",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "create_folder",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "use_folder": {
        "main": [
          [
            {
              "node": "folder_id",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "create_folder": {
        "main": [
          [
            {
              "node": "folder_id",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "folder_id": {
        "main": [
          [
            {
              "node": "download_by_url",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "download_by_url": {
        "main": [
          [
            {
              "node": "prepare_for_check",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "find_duplicate": {
        "main": [
          [
            {
              "node": "file_exists",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "file_exists": {
        "main": [
          [
            {
              "node": "use_existing_file",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "prepare_for_upload1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "use_existing_file": {
        "main": [
          [
            {
              "node": "file_id_passthrough",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "upload_file": {
        "main": [
          [
            {
              "node": "file_id_passthrough",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "gdrive_permission": {
        "main": [
          [
            {
              "node": "build_drive_url",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "start": {
        "main": [
          [
            {
              "node": "gd_input",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "prepare_for_check": {
        "main": [
          [
            {
              "node": "find_duplicate",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "prepare_for_upload1": {
        "main": [
          [
            {
              "node": "upload_file",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "file_id_passthrough": {
        "main": [
          [
            {
              "node": "gdrive_permission",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": null,
    "pinData": {},
    "versionId": "cbce3f50-b9a2-44b1-b30c-0e5574a6c1e6",
    "triggerCount": 0,
    "shared": [
      {
        "createdAt": "2025-09-27T20:03:21.547Z",
        "updatedAt": "2025-09-27T20:03:21.547Z",
        "role": "workflow:owner",
        "workflowId": "Yxs70uuQ2IMHaXP9",
        "projectId": "q3w2LTZBOQaMnapN",
        "project": {
          "createdAt": "2025-06-19T19:10:02.873Z",
          "updatedAt": "2025-06-19T19:27:56.091Z",
          "id": "q3w2LTZBOQaMnapN",
          "name": "Mykhailo Bielov <mic.belov@gmail.com>",
          "type": "personal",
          "icon": null,
          "description": null,
          "projectRelations": [
            {
              "createdAt": "2025-06-19T19:10:02.873Z",
              "updatedAt": "2025-06-19T19:10:02.873Z",
              "userId": "d77898c9-3f06-4caf-bb7c-709eb64519d3",
              "projectId": "q3w2LTZBOQaMnapN",
              "user": {
                "createdAt": "2025-06-19T19:09:59.870Z",
                "updatedAt": "2025-10-13T17:30:51.989Z",
                "id": "d77898c9-3f06-4caf-bb7c-709eb64519d3",
                "email": "mic.belov@gmail.com",
                "firstName": "Mykhailo",
                "lastName": "Bielov",
                "personalizationAnswers": {
                  "version": "v4",
                  "personalization_survey_submitted_at": "2025-06-19T19:28:25.666Z",
                  "personalization_survey_n8n_version": "1.98.2",
                  "companySize": "<20",
                  "companyType": "education",
                  "role": "business-owner",
                  "reportedSource": "google"
                },
                "settings": {
                  "userActivated": true,
                  "firstSuccessfulWorkflowId": "8HqEBFxiW4D0JcNZ",
                  "userActivatedAt": 1755203494225,
                  "npsSurvey": {
                    "responded": true,
                    "lastShownAt": 1751139170083
                  },
                  "easyAIWorkflowOnboarded": true
                },
                "disabled": false,
                "mfaEnabled": false,
                "lastActiveAt": "2025-10-13",
                "isPending": false
              }
            }
          ]
        }
      }
    ],
    "tags": []
  },
  "metadata": {
    "version": "1.0.4",
    "author": "Mykhailo Bielov",
    "description": "Advanced Google Drive file upload workflow with folder management, duplicate detection, and public sharing",
    "tags": [
      "google-drive",
      "file-upload",
      "file-management",
      "automation",
      "duplicate-detection"
    ],
    "github": {
      "repository": "https://github.com/belmic/n8n_projects",
      "branch": "main",
      "synced": false,
      "lastSync": "2025-10-13T20:32:29.060Z"
    },
    "workflowDetails": {
      "nodes": 17,
      "connections": 16,
      "triggerType": "Execute Workflow Trigger",
      "executionFrequency": "On-demand",
      "dataSource": "External API/URL",
      "dataDestination": "Google Drive",
      "features": [
        "Folder creation and management",
        "Duplicate file detection",
        "File download from URL",
        "Public sharing permissions",
        "Drive URL generation",
        "Error handling and validation"
      ],
      "services": [
        "google-drive",
        "http-request"
      ],
      "complexity": "advanced"
    }
  }
}